# -*- coding: utf-8 -*-
"""app_bitcoin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vwd93GyyUk3bgWfzEq2voKTp3PKCFt5t
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVR
from sklearn.impute import SimpleImputer

# Fungsi untuk mengonversi nilai dengan 'K', 'M', dan '%' menjadi angka
def convert_to_numeric(value):
    if isinstance(value, str):
        value = value.replace(',', '').replace('%', '')
        if 'K' in value:
            return float(value.replace('K', '')) * 1000
        elif 'M' in value:
            return float(value.replace('M', '')) * 1000000
    try:
        return float(value)
    except ValueError:
        return np.nan

# Membaca dataset
df = pd.read_csv('bitcoin.csv')

# Mengatasi nilai non-numerik
for column in df.columns[1:]:
    df[column] = df[column].apply(convert_to_numeric)

# Memastikan semua kolom numerik memiliki tipe float
for column in df.columns[1:]:
    df[column] = pd.to_numeric(df[column], errors='coerce')

# Imputasi nilai hilang dengan mean
imputer = SimpleImputer(strategy='mean')
df.iloc[:, 1:] = imputer.fit_transform(df.iloc[:, 1:])

# Mengatasi Outliers
numeric_df = df.select_dtypes(include=[np.number])
Q1 = numeric_df.quantile(0.25)
Q3 = numeric_df.quantile(0.75)
IQR = Q3 - Q1
df = df[~((numeric_df < (Q1 - 1.5 * IQR)) | (numeric_df > (Q3 + 1.5 * IQR))).any(axis=1)]

# Membagi data menjadi data pelatihan dan pengujian
X = df.drop(columns=['Tanggal', 'Terakhir'])
y = df['Terakhir']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalisasi
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Pelatihan Model SVM
model = SVR(kernel='rbf', C=1.0, gamma='scale')
model.fit(X_train_scaled, y_train)

# Implementasi Streamlit
st.title('Prediksi Harga Cryptocurrency')

# Input data pengguna
st.sidebar.header('Input Data')
input_data = {}
for column in X.columns:
    input_data[column] = st.sidebar.number_input(column, value=float(X[column].mean()))

input_df = pd.DataFrame(input_data, index=[0])

# Normalisasi input data pengguna
input_scaled = scaler.transform(input_df)

# Prediksi menggunakan model yang sudah dilatih
prediksi = model.predict(input_scaled)

# Menampilkan hasil prediksi
st.write('### Data Input Pengguna')
st.write(input_df)

st.write('### Prediksi Harga Cryptocurrency')
st.write(prediksi[0])